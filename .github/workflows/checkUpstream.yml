#######################################################
# Check dockerhub for updates to the tomcat container #
#######################################################

name: Check For Upstream Updates

on:
  schedule:
    # Once a day at 00:00 UTC
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  createMatrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.desiredImages }}
      dockertags: ${{ steps.set-dockertags.outputs.dockertags }}
    
    steps:
      - name: Checkout default branch
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set environment variables
        run: |
          echo "upstream_image=tomcat" >> $GITHUB_ENV
          echo "scriptsdir=.github/helperScripts" >> $GITHUB_ENV

      # Funny workaround to output a multiline string to another job
      # Pipe the multiline string into jq to create a minified JSON array where
      # each element is an individual line.
      # This minified array is output to GitHub Actions as a single line, can be
      # read by another job, and parsed back to a multiline string using jq
      - name: Fetch all tags and set as Github Actions output
        id: set-dockertags
        run: |
          dockertags=$(\
            ${{ env.scriptsdir }}/dockertags.sh \
            --user ${{ secrets.registryuser }} \
            --password ${{ secrets.registrypwd }} \
            --namespace library \
            --image ${{ env.upstream_image }} \
            | jq -cR '[., inputs]' \
          )
          echo "dockertags=$dockertags" >> $GITHUB_OUTPUT

      # Create a minified JSON object from the desiredImages file (see
      # README.desiredImages for a description of its contents)
      # The JSON object has the form:
      # {
      #   tag: [
      #     {
      #       "ERE": <ERE>,
      #       "isLatest": <0|1>
      #     },
      #   ]
      # }
      - name: Create matrix output
        id: set-matrix
        run: |
          echo "desiredImages=$(
            jq -cnR '{
              "tag": [
                inputs/" " | {"ERE": .[0], "isLatest": .[1]}
              ]
            }' ${{ env.scriptsdir }}/desiredImages \
          )" >> $GITHUB_OUTPUT

  checkUpstream:
    runs-on: ubuntu-latest
    needs: createMatrix
    strategy:
      matrix: ${{ fromJson(needs.createMatrix.outputs.matrix) }}

    steps:

    - name: Set environment variables
      run: |
        echo "scriptsdir=.github/helperScripts" >> $GITHUB_ENV

    - name: Checkout default branch
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Check the most recent upstream tomcat version
      run: |
        upstream=$(\
          echo '${{ needs.createMatrix.outputs.dockertags }}' \
          | jq -r '.[]' \
          | grep -E -e '${{ matrix.tag.ERE }}' \
          | sort -Vr \
          | head -n 1 \
        )
        echo $upstream
        echo "upstream=$upstream" >> $GITHUB_ENV

    - name: Check if a branch on the repo is up to date
      run: |
        current=$(git branch --list -r "origin/*" \
        | sed 's|^ *||g' \
        | grep -E -e '${{ matrix.tag.ERE }}' \
        | sort -Vr \
        | head -n 1)
        echo Most current branch: $current
        test "$current" = "${{ env.upstream }}" &&
        up2date=true || up2date=false
        echo "Up to date with latest version (${{ env.upstream }})?"
        echo $up2date
        echo "up2date=$up2date" >> $GITHUB_ENV

    - name: Already up to date
      if: ${{ env.up2date == 'true'}}
      run: |
        echo "Already up to date with upstream: ${{ env.upstream }}"

    - name: Checkout new branch
      if: ${{ env.up2date != 'true' }}
      run: |
        echo "tag=${{ env.upstream }}" >> $GITHUB_ENV
        echo "New upstream version ${{ env.upstream }}"
        echo "Creating new branch from origin/latest ..."
        git checkout -b ${{ env.upstream }} origin/latest

    - name: Update Dockerfile
      if: ${{ env.up2date != 'true' }}
      run: |
        sed -e "s/FROM tomcat:.*/FROM tomcat:${{ env.upstream }}/g" Dockerfile -i
        grep "FROM tomcat:" Dockerfile

    - name: Build image
      if: ${{ env.up2date != 'true' }}
      run: docker build --no-cache -t ${{ secrets.imagename }}:${{ env.tag }} .

    - name: Download sample web app
      if: ${{ env.up2date != 'true' }}
      run: |
        wget -O $(pwd)/.github/testScripts/sample.war \
        https://tomcat.apache.org/tomcat-8.5-doc/appdev/sample/sample.war

    - name: Run container
      if: ${{ env.up2date != 'true' }}
      run: |
        docker run --name tomcat \
        -e TOMCAT_USER_ID=$(id -u) \
        -e TOMCAT_GROUP_ID=$(getent group $USER | cut -d : -f3) \
        -v $(pwd)/.github/testScripts:/testScripts \
        -v $(pwd)/.github/testScripts:/usr/local/tomcat/webapps \
        -d \
        -p 8080:8080 \
        unidata/tomcat-docker:latest

    - name: Wait and listen for Tomcat to fire up
      if: ${{ env.up2date != 'true' }}
      run: |
        nc -z -w300 127.0.0.1 8080
        for i in {1..5}; do curl -o /dev/null http://127.0.0.1:8080/sample/index.html && break || \
        (echo sleeping 15... && sleep 15); done

    - name: Run test script
      if: ${{ env.up2date != 'true' }}
      run: |
        ./.github/testScripts/test.sh \
        && rm $(pwd)/.github/testScripts/{sample.war,sample,actual.html}

    - name: Push to git
      if: ${{ env.up2date != 'true' }}
      run: |
        git config --global user.name $GITHUB_ACTOR
        git config --global user.email $GITHUB_ACTOR@users.noreply.github.com
        git add . && git commit -m "Update to tomcat:${{ env.upstream }}" && \
        git push origin ${{ env.upstream }}

    - name: Push to dockerhub
      if: ${{ env.up2date != 'true' }}
      run: |
        docker logout
        echo ${{ secrets.registrypwd }} | docker login -u ${{ secrets.registryuser }} --password-stdin
        docker push ${{ secrets.imagename }}:${{ env.tag }} && \
        { docker logout && echo "Successfully pushed ${{ secrets.imagename }}:${{ env.tag }} to dockerhub"; } ||
        { docker logout && echo "Docker push failed" && exit 1; }

    - name: Push to latest
      if: ${{ env.up2date != 'true' }}
      run: |
        if [[ "${{ matrix.tag.isLatest }}" == "1" ]];
        then
          git push origin ${{ env.upstream }}:latest
          docker logout
          echo ${{ secrets.registrypwd }} | docker login -u ${{ secrets.registryuser }} --password-stdin
          docker tag ${{ secrets.imagename }}:${{ env.tag }} ${{ secrets.imagename }}:latest && \
          docker push ${{ secrets.imagename }}:latest && \
          { docker logout && echo "Successfully pushed ${{ secrets.imagename }}:latest to dockerhub"; } ||
          { docker logout && echo "Docker push failed" && exit 1; }
        fi
